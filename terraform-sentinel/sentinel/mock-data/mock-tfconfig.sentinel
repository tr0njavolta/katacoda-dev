import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {
			"dev_website_endpoint": {
				"depends_on":  [],
				"description": "",
				"references": [
					"aws_s3_bucket.demo",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config": {},
						"references": {
							"region": [
								"var.region",
							],
						},
						"version": ">= 3.38.0",
					},
				},
				"config": {},
				"references": {
					"region": [
						"var.region",
					],
				},
				"version": ">= 3.38.0",
			},
			"random": {
				"alias": {
					"": {
						"config":     {},
						"references": {},
						"version":    "3.1.0",
					},
				},
				"config":     {},
				"references": {},
				"version":    "3.1.0",
			},
		},
		"resources": {
			"aws_s3_bucket": {
				"demo": {
					"config": {
						"acl":           "public-read",
						"force_destroy": true,
						"tags": {
							"Environment": "Learn",
							"Name":        "HashiCorp",
						},
						"website": [
							{
								"error_document": "error.html",
								"index_document": "index.html",
							},
						],
					},
					"provisioners": null,
					"references": {
						"acl": [],
						"bucket": [
							"var.prefix",
							"random_pet.petname",
						],
						"force_destroy": [],
						"policy": [
							"var.prefix",
							"random_pet.petname",
						],
						"tags": [],
						"website": [
							{
								"error_document": [],
								"index_document": [],
							},
						],
					},
				},
			},
			"aws_s3_bucket_object": {
				"demo": {
					"config": {
						"acl":          "public-read",
						"content_type": "text/html",
						"key":          "index.html",
					},
					"provisioners": null,
					"references": {
						"acl": [],
						"bucket": [
							"aws_s3_bucket.demo",
						],
						"content": [
							"path.module",
						],
						"content_type": [],
						"key":          [],
					},
				},
			},
			"random_pet": {
				"petname": {
					"config": {
						"length":    3,
						"separator": "-",
					},
					"provisioners": null,
					"references": {
						"length":    [],
						"separator": [],
					},
				},
			},
		},
		"variables": {
			"prefix": {
				"default":     null,
				"description": "This is the environemnt where Terraform deploys your webapp",
			},
			"region": {
				"default":     null,
				"description": "This is the cloud hosting region where Terraform deploys your webapp",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
